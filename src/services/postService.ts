import { 
  collection, 
  addDoc, 
  getDocs, 
  query, 
  orderBy, 
  where, 
  Timestamp,
  doc,
  updateDoc,
  increment
} from 'firebase/firestore';
import { db } from '../config/firebase';
import { Post, Category } from '../types';

export const createPost = async (postData: {
  title?: string;
  content: string;
  tags: string[];
  lenses: string[];
  userId: string;
  username: string;
}) => {
  try {
    const post = {
      ...postData,
      interpretations: [], // Will be generated by AI
      comments: [],
      createdAt: Timestamp.now(),
      upvotes: 0,
      downvotes: 0,
      isAnonymous: true,
    };

    const docRef = await addDoc(collection(db, 'posts'), post);
    return { id: docRef.id, ...post };
  } catch (error) {
    console.error('Error creating post:', error);
    throw error;
  }
};

export const getPosts = async (category?: Category) => {
  try {
    let q = query(collection(db, 'posts'), orderBy('createdAt', 'desc'));
    
    if (category) {
      q = query(
        collection(db, 'posts'),
        where('tags', 'array-contains', category),
        orderBy('createdAt', 'desc')
      );
    }

    const querySnapshot = await getDocs(q);
    const posts: Post[] = [];
    
    querySnapshot.forEach((doc) => {
      const data = doc.data();
      posts.push({
        id: doc.id,
        ...data,
        createdAt: data.createdAt.toDate(),
      } as Post);
    });

    return posts;
  } catch (error) {
    console.error('Error getting posts:', error);
    throw error;
  }
};

export const upvotePost = async (postId: string) => {
  try {
    const postRef = doc(db, 'posts', postId);
    await updateDoc(postRef, {
      upvotes: increment(1)
    });
  } catch (error) {
    console.error('Error upvoting post:', error);
    throw error;
  }
};

export const downvotePost = async (postId: string) => {
  try {
    const postRef = doc(db, 'posts', postId);
    await updateDoc(postRef, {
      downvotes: increment(1)
    });
  } catch (error) {
    console.error('Error downvoting post:', error);
    throw error;
  }
}; 